version: '3.8'

services:
  # Frontend Service (Production)
  frontend:
    image: fire-incident-frontend:latest
    ports:
      - "80:3000"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3001
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service (Production)
  backend:
    image: fire-incident-backend:latest
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - API_TOKEN=${API_TOKEN}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - UPLOAD_DIR=uploads
      - LOG_LEVEL=warn
      - REDIS_URL=redis://redis:6379
    volumes:
      - uploads-data:/app/uploads
      - logs-data:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for production rate limiting
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  uploads-data:
    driver: local
  logs-data:
    driver: local
  redis-data:
    driver: local

networks:
  default:
    name: fire-incident-prod-network
